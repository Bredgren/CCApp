// Generated by CoffeeScript 1.6.2
(function() {
  var Notifier, UiElement, UiElementType, UiManager, UiTextElement, updateCollection, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.UiPosition = (function() {
    function UiPosition(x_, y_) {
      this.x_ = x_;
      this.y_ = y_;
    }

    UiPosition.prototype.x = function() {
      return this.x_;
    };

    UiPosition.prototype.xIs = function(x) {
      if (x === this.x_) {
        return;
      }
      return this.x_ = x;
    };

    UiPosition.prototype.y = function() {
      return this.y_;
    };

    UiPosition.prototype.yIs = function(y) {
      if (y === this.y_) {
        return;
      }
      return this.y_ = y;
    };

    UiPosition.prototype.equal = function(other) {
      return other.x() === this.x_ && other.y() === this.y_;
    };

    UiPosition.prototype.isNull = function() {
      return this.x_ === null && this.y_ === null;
    };

    return UiPosition;

  })();

  Notifier = (function() {
    function Notifier() {
      this.notifieeCollection_ = {};
    }

    Notifier.prototype.notifieeIs = function(attribute, callback) {
      var current;

      current = this.notifieeCollection_[attribute];
      if (current) {
        if (__indexOf.call(current, callback) >= 0) {
          return;
        }
        current.push(callback);
      } else {
        current = [callback];
      }
      return this.notifieeCollection_[attribute] = current;
    };

    Notifier.prototype.notify_ = function() {
      var args, attribute, notifiee, notifiees, _i, _len, _results;

      attribute = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      notifiees = this.notifieeCollection_[attribute];
      if (!notifiees) {
        return;
      }
      console.log("notifying for", attribute, "with args", args);
      _results = [];
      for (_i = 0, _len = notifiees.length; _i < _len; _i++) {
        notifiee = notifiees[_i];
        _results.push(notifiee(args));
      }
      return _results;
    };

    return Notifier;

  })();

  UiElementType = (function() {
    function UiElementType(name) {
      this.name = name;
    }

    return UiElementType;

  })();

  window.uiElementType = {
    element: new UiElementType("element"),
    textElement: new UiElementType("textElement")
  };

  UiElement = (function(_super) {
    __extends(UiElement, _super);

    UiElement.prototype.type_ = uiElementType.element;

    function UiElement(name_, parent_) {
      this.name_ = name_;
      this.parent_ = parent_ != null ? parent_ : null;
      this.handleInput = __bind(this.handleInput, this);
      UiElement.__super__.constructor.call(this);
      this.childCollection_ = {};
      this.visible_ = false;
      this.active_ = false;
      this.topLeft_ = new UiPosition(0, 0);
      this.bottomRight_ = new UiPosition(0, 0);
      this.enter_action_ = null;
      this.leave_action_ = null;
      this.press_action_ = null;
      this.release_action_ = null;
      if (!this.parent_) {
        uiManager.notifieeIs('input', this.handleInput);
      }
    }

    UiElement.prototype.name = function() {
      return this.name_;
    };

    UiElement.prototype.type = function() {
      return this.type_;
    };

    UiElement.prototype.visible = function() {
      return this.visible_;
    };

    UiElement.prototype.visibleIs = function(visible) {
      return this.visible_ = visible;
    };

    UiElement.prototype.active = function() {
      return this.active_;
    };

    UiElement.prototype.activeIs = function(active) {
      if (active === this.active_) {
        return;
      }
      this.active_ = active;
      return this.notify_('active', active);
    };

    UiElement.prototype.parent = function() {
      return this.parent_;
    };

    UiElement.prototype.parentIs = function(element) {
      return this.parent_ = element;
    };

    UiElement.prototype.child = function(name) {
      return this.childCollection_[name];
    };

    UiElement.prototype.childIs = function(name, type) {
      updateCollection(this.childCollection_, name, type, this);
      return this.childCollection_[name];
    };

    UiElement.prototype.topLeft = function() {
      return this.topLeft_;
    };

    UiElement.prototype.topLeftIs = function(position) {
      if (position.equal(this.topLeft_)) {
        return;
      }
      this.topLeft_.xIs(position.x());
      return this.topLeft_.yIs(position.y());
    };

    UiElement.prototype.bottomRight = function() {
      return this.bottomRight_;
    };

    UiElement.prototype.bottomRightIs = function(position) {
      if (position.equal(this.bottomRight_)) {
        return;
      }
      this.bottomRight_.xIs(position.x());
      return this.bottomRight_.yIs(position.y());
    };

    UiElement.prototype.enterActionIs = function(func) {
      return this.enter_action_ = func;
    };

    UiElement.prototype.leaveActionIs = function(func) {
      return this.leave_action_ = func;
    };

    UiElement.prototype.pressActionIs = function(func) {
      return this.press_action_ = func;
    };

    UiElement.prototype.releaseActionIs = function(func) {
      return this.release_action_ = func;
    };

    UiElement.prototype.handleInput = function(args) {
      var child, input, name, prev, _ref;

      if (!this.active_) {
        return;
      }
      console.log(this.name_, "is handling input");
      input = args[0];
      prev = args[1];
      if ((!input.isNull() && this.positionWithin_(input)) || (!prev.isNull() && this.positionWithin_(prev))) {
        _ref = this.childCollection_;
        for (name in _ref) {
          child = _ref[name];
          child.handleInput(args);
        }
      }
      if (input.isNull()) {
        if (!prev.isNull() && this.positionWithin_(prev)) {
          return typeof this.release_action_ === "function" ? this.release_action_() : void 0;
        }
      } else {
        if (prev.isNull()) {
          if (this.positionWithin_(input)) {
            return typeof this.press_action_ === "function" ? this.press_action_() : void 0;
          }
        } else {
          if (this.positionWithin_(input)) {
            if (!this.positionWithin_(prev)) {
              return typeof this.enter_action_ === "function" ? this.enter_action_() : void 0;
            }
          } else {
            if (this.positionWithin_(prev)) {
              return typeof this.leave_action_ === "function" ? this.leave_action_() : void 0;
            }
          }
        }
      }
    };

    UiElement.prototype.positionWithin_ = function(position) {
      return this.topLeft_.x() <= position.x() && position.x() <= this.bottomRight_.x() && this.topLeft_.y() <= position.y() && position.y() <= this.bottomRight_.y();
    };

    return UiElement;

  })(Notifier);

  UiTextElement = (function(_super) {
    __extends(UiTextElement, _super);

    function UiTextElement() {
      _ref = UiTextElement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UiTextElement.prototype.type_ = uiElementType.textElement;

    return UiTextElement;

  })(UiElement);

  updateCollection = function(collection, name, type, parent) {
    var current;

    if (parent == null) {
      parent = null;
    }
    current = collection[name];
    if (current && current.type === type) {
      return false;
    }
    switch (type) {
      case uiElementType.element:
        collection[name] = new UiElement(name, parent);
        break;
      case uiElementType.button:
        collection[name] = new UiButton(name, parent);
    }
    return true;
  };

  UiManager = (function(_super) {
    __extends(UiManager, _super);

    function UiManager() {
      UiManager.__super__.constructor.call(this);
      this.elementCollection_ = {};
      this.input_ = new UiPosition(null, null);
      this.prev_input_ = new UiPosition(null, null);
    }

    UiManager.prototype.element = function(name) {
      return this.elementCollection_[name];
    };

    UiManager.prototype.elementIs = function(name, type) {
      if (updateCollection(this.elementCollection_, name, type)) {
        this.notify_('element', name, type);
      }
      return this.elementCollection_[name];
    };

    UiManager.prototype.input = function() {
      return this.input_;
    };

    UiManager.prototype.inputIs = function(input) {
      if (input.equal(this.input_)) {
        return;
      }
      this.prev_input_.xIs(this.input_.x());
      this.prev_input_.yIs(this.input_.y());
      this.input_.xIs(input.x());
      this.input_.yIs(input.y());
      return this.notify_('input', this.input_, this.prev_input_);
    };

    return UiManager;

  })(Notifier);

  window.uiManager = new UiManager();

}).call(this);
