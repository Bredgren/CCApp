// Generated by CoffeeScript 1.6.2
(function() {
  var UiButton, UiElement, UiElementType, UiManager, updateCollection, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  UiElementType = (function() {
    function UiElementType(name) {
      this.name = name;
    }

    return UiElementType;

  })();

  window.uiElementType = {
    element: new UiElementType("element"),
    button: new UiElementType("button")
  };

  UiElement = (function() {
    UiElement.prototype.type_ = uiElementType.element;

    function UiElement(name_) {
      this.name_ = name_;
      this.childCollection_ = {};
      this.parent_ = null;
    }

    UiElement.prototype.name = function() {
      return this.name_;
    };

    UiElement.prototype.type = function() {
      return this.type_;
    };

    UiElement.prototype.parent = function() {
      return this.parent_;
    };

    UiElement.prototype.parentIs = function(element) {
      return this.parent_ = element;
    };

    UiElement.prototype.child = function(name) {
      return this.childCollection_[name];
    };

    UiElement.prototype.childIs = function(name, type) {
      updateCollection(this.childCollection_, name, type);
      return this.childCollection_[name].parentIs(this);
    };

    return UiElement;

  })();

  UiButton = (function(_super) {
    __extends(UiButton, _super);

    function UiButton() {
      _ref = UiButton.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UiButton.prototype.type_ = uiElementType.button;

    return UiButton;

  })(UiElement);

  updateCollection = function(collection, name, type) {
    var current;

    current = collection[name];
    if (current && current.type === type) {
      return;
    }
    switch (type) {
      case uiElementType.element:
        return collection[name] = new UiElement(name);
      case uiElementType.button:
        return collection[name] = new UiButton(name);
    }
  };

  UiManager = (function() {
    function UiManager() {
      this.elementCollection_ = {};
    }

    UiManager.prototype.element = function(name) {
      return this.elementCollection_[name];
    };

    UiManager.prototype.elementIs = function(name, type) {
      return updateCollection(this.elementCollection_, name, type);
    };

    return UiManager;

  })();

  window.uiManager = new UiManager();

}).call(this);
